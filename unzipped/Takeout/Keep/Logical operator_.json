{"color":"DEFAULT","isTrashed":false,"isPinned":false,"isArchived":false,"textContent":"Before, the operational operators like < and >= worked with NumPy arrays out of the box. Unfortunately, this is not true for the boolean operators and, or, and not.\n\nTo use these operators with NumPy, you will need np.logical_and(), np.logical_or() and np.logical_not()","title":"Logical operator ","userEditedTimestampUsec":1676283918913000,"createdTimestampUsec":1676283904427000,"textContentHtml":"<p dir=\"ltr\" style=\"line-height:1.38;margin-top:0.0pt;margin-bottom:0.0pt;\"><span style=\"font-size:16.0pt;font-family:'Google Sans';color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\">Before, the operational operators like &lt; and &gt;= worked with NumPy arrays out of the box. Unfortunately, this is not true for the boolean operators and, or, and not.<\/span><\/p><br /><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0.0pt;margin-bottom:0.0pt;\"><span style=\"font-size:16.0pt;font-family:'Google Sans';color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\">To use these operators with NumPy, you will need np.logical_and(), np.logical_or() and np.logical_not()<\/span><\/p>","labels":[{"name":"NumPy"}]}