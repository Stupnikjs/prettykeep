{"color":"DEFAULT","isTrashed":false,"isPinned":false,"isArchived":false,"textContent":"Single Reponsability Principle \n\nOpen/Close Principle : open for extension but close for modification \n\nLiskov Substitution Principle: Every subclass or derived class should be substituable for their base or parent class\n\nInterface Segregation Principle: this principle states that no client should be forced to depend ond on methods it does not use \n\nDependency Inversion Principle: High-level modules should not depend on low-level modules. Both should depend on abstractions. Abstractions  should not depend on details. Details should depend on abstractions. ","title":"SOLID principle ","userEditedTimestampUsec":1683617662557000,"createdTimestampUsec":1683617376963000,"textContentHtml":"<p dir=\"ltr\" style=\"line-height:1.38;margin-top:0.0pt;margin-bottom:0.0pt;\"><span style=\"font-size:16.0pt;font-family:'Google Sans';color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\">Single Reponsability Principle&nbsp;<\/span><\/p><br /><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0.0pt;margin-bottom:0.0pt;\"><span style=\"font-size:16.0pt;font-family:'Google Sans';color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\">Open/Close Principle : open for extension but close for modification&nbsp;<\/span><\/p><br /><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0.0pt;margin-bottom:0.0pt;\"><span style=\"font-size:16.0pt;font-family:'Google Sans';color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\">Liskov Substitution Principle: Every subclass or derived class should be substituable for their base or parent class<\/span><\/p><br /><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0.0pt;margin-bottom:0.0pt;\"><span style=\"font-size:16.0pt;font-family:'Google Sans';color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\">Interface Segregation Principle: this principle states that no client should be forced to depend ond on methods it does not use&nbsp;<\/span><\/p><br /><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0.0pt;margin-bottom:0.0pt;\"><span style=\"font-size:16.0pt;font-family:'Google Sans';color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\">Dependency Inversion Principle: High-level modules should not depend on low-level modules. Both should depend on abstractions. Abstractions&nbsp; should not depend on details. Details should depend on abstractions. <\/span><\/p>"}